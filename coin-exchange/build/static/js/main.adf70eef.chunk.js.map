{"version":3,"sources":["components/Coin.jsx","components/CoinList.jsx","components/AccountBalance.jsx","App.js","serviceWorker.js","index.js"],"names":["TableData","styled","td","TableDataName","TableDataControls","Button","button","Coin","props","balanceDisplay","showBalance","balance","name","ticker","price","action","method","className","onClick","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","columnLabel","coinData","map","key","Balance","div","Section","section","BalanceToggleButton","formatter","Intl","NumberFormat","style","currency","AccountBalance","buttonText","content","format","amount","buttonClass","toggleBalanceVisibility","handleBrrrr","AppStyle","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","console","log","getIDs","a","axios","get","repsonse","data","slice","coin","id","getCoinData","coinIds","promises","Promise","all","extractPrices","response","symbol","quotes","USD","loadAllAPIData","coinPriceData","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldBalance","oldValue","isBuy","valueChangeID","balanceChange","window","prompt","alert","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.adf70eef.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst TableData = styled.td`\n    border: 1px solid #cccccc;\n    width: 16vw;\n`;\n\nconst TableDataName = styled(TableData)`\n    width: 20vw;\n`;\n\nconst TableDataControls = styled(TableData)`\n    width: 16vw;\n`;\n\nconst Button = styled.button`\n    font-size: 11px;\n    width: 64px;\n    margin: 3px 5px 0;\n`;\n\nexport default function Coin(props) {\n\n    const handleRefresh = (event) => {\n        // Refresh the screen\n        event.preventDefault();\n        props.handleRefresh(props.tickerId);\n    }\n\n    const handleBuy = (event) => {\n        // Purchase tokens\n        event.preventDefault();\n        props.handleTransaction(true, props.tickerId);\n    }\n\n    const handleSell = (event) => {\n        // Sell tokens\n        event.preventDefault();\n        props.handleTransaction(false, props.tickerId);\n    }\n\n    let balanceDisplay = props.showBalance ?\n        <TableData>{props.balance}</TableData> : '-';\n\n    return (\n        <tr>\n            <TableDataName>{props.name}</TableDataName>\n            <TableData>{props.ticker}</TableData>\n            {balanceDisplay}\n            <TableData>${props.price}</TableData>\n            <TableDataControls>\n                <form action=\"#\" method=\"POST\">\n                    <Button className='btn btn-info' \n                        onClick={handleRefresh}>Refresh\n                    </Button>\n                    <Button className='btn btn-warning' \n                        onClick={handleBuy}>Buy\n                    </Button>\n                    <Button className='btn btn-danger' \n                        onClick={handleSell}>Sell\n                    </Button>\n                </form>\n            </TableDataControls>\n        </tr>\n    );\n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    balance: PropTypes.number.isRequired,\n    price: PropTypes.number.isRequired,\n    showBalance: PropTypes.bool.isRequired,\n}","import React from 'react'\nimport Coin from './Coin';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Table = styled.table`\n    display: inline-block;\n    font-size: 1.4rem;\n`\n\nexport default function CoinList (props){\n    \n    let columnLabel = <th>Balance</th>;\n    \n    return (\n        <Table className='table-bordered'>\n            <thead>\n                <tr>\n                <th>Name</th>\n                <th>Ticker</th>\n                {columnLabel}\n                <th>Price</th>\n                <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.coinData.map( ({key, name, ticker, balance, price}) => \n                        <Coin key = {key} \n                            handleRefresh={props.handleRefresh}\n                            handleTransaction={props.handleTransaction}\n                            name={name}\n                            ticker={ticker}\n                            balance={balance}\n                            showBalance={props.showBalance}\n                            price={price} \n                            tickerId={key} />\n                    )\n                }\n            </tbody>\n        </Table>\n    )\n}\n\nCoinList.propTypes = {\n    showBalance: PropTypes.bool.isRequired,\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Balance = styled.div`\r\n    min-width: 250px;\r\n    margin: 0.5rem 0 0 2.5rem;\r\n    font-size: 1.5em;\r\n    vertical-align: middle;\r\n    text-align: center;\r\n`;\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    margin-bottom:2rem;\r\n    line-height:3rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    margin: 0 8px;\r\n`;\r\n\r\nconst BalanceToggleButton = styled(Button)`\r\n    width: 150px;\r\n`;\r\n\r\nvar formatter = Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n});\r\n\r\nexport default function AccountBalance (props) {\r\n    \r\n    let buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    let content = props.showBalance ? <>{formatter.format(props.amount)}</> : '\\u00A0';\r\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\r\n\r\n    return (\r\n        <>\r\n            <Balance>Fiat: {content}</Balance>\r\n            <Section>\r\n                <BalanceToggleButton \r\n                    className={buttonClass} \r\n                    onClick={props.toggleBalanceVisibility}>\r\n                    {buttonText}\r\n                </BalanceToggleButton>\r\n                <Button className='btn btn-success'\r\n                        onClick={props.handleBrrrr}>\r\n                    <i className='fas fa-helicopter'></i>\r\n                </Button>\r\n            </Section>\r\n        </>\r\n    );\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired,\r\n    showBalance: PropTypes.bool.isRequired,\r\n}","import React, {useState, useEffect} from 'react';\r\nimport CoinList from './components/CoinList';\r\nimport AccountBalance from './components/AccountBalance';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\n//import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootswatch/dist/superhero/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/js/all';\r\n\r\nconst AppStyle = styled.div`\r\n  text-align: center;\r\n  background-color: darkslategray;\r\n  color: #cccccc;\r\n`\r\nconst COIN_COUNT = 10;\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\r\n\r\nfunction App (props) {\r\n\r\n  // const [balance, setBalance] = useState(10000);\r\n  const [balance, setBalance] = useState(10000);\r\n  const [showBalance, setShowBalance] = useState(true);\r\n  const [coinData, setCoinData] = useState([]);\r\n  const apName = 'Coin Exchange';\r\n  console.log(apName);\r\n\r\n  const getIDs = async () => {\r\n    // Fetch the IDs of first COIN_COUNT items.\r\n    const repsonse = await axios.get('https://api.coinpaprika.com/v1/coins')\r\n    return repsonse.data.slice(0,COIN_COUNT).map(coin => coin.id);\r\n  }\r\n\r\n  const getCoinData = async(coinIds) => {\r\n    // Retrieve coin data array for given coin id's.\r\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\r\n    const promises = coinIds.map(key => axios.get(tickerUrl + key));\r\n    return await Promise.all(promises);\r\n  }\r\n\r\n  const extractPrices = (coinData) => {\r\n    // Extract prices from given coinData array\r\n    return coinData.map(function(response) {\r\n      const coin = response.data;\r\n      return {\r\n        key:    coin.id,\r\n        name:   coin.name,\r\n        ticker: coin.symbol, \r\n        balance: 0,\r\n        price:  formatPrice(coin.quotes.USD.price),\r\n      };\r\n    });\r\n  }\r\n\r\n  const loadAllAPIData = async () => {\r\n    // Load API data for all items.\r\n    const coinIds = await getIDs();\r\n    const coinData = await getCoinData(coinIds);\r\n    const coinPriceData = extractPrices(coinData);\r\n    setCoinData(coinPriceData);\r\n  }\r\n\r\n  useEffect (function() {\r\n    if (coinData.length === 0){\r\n      // component did mount\r\n      loadAllAPIData();\r\n    } else {\r\n      // component did update\r\n    }\r\n  });\r\n\r\n  const handleBrrrr = () => {\r\n    setBalance( oldBalance => oldBalance + 1200);\r\n  }\r\n\r\n  const handleTransaction = ( isBuy, valueChangeID) => {\r\n    var balanceChange = window.prompt('How much?') * (isBuy ? 1: -1);\r\n    const newCoinData = coinData.map( function(values) {\r\n      let newValues = {...values};\r\n      if ( valueChangeID === values.key) {\r\n        if ( isBuy ) {\r\n          if ( balance < newValues.price*balanceChange ) {\r\n            alert('Insufficient funds for this purchase.');\r\n            return values;\r\n          } \r\n        } else {\r\n          if (values.balance + balanceChange < 0) {\r\n            alert('Insufficient holdings for this sell order.');\r\n            return values;\r\n          }\r\n        } // Transaction is possible.\r\n        newValues.balance += balanceChange;\r\n        setBalance( oldBalance => oldBalance - balanceChange*newValues.price);\r\n      }\r\n      return newValues;\r\n    });\r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  const toggleBalanceVisibility = () => {\r\n    setShowBalance(oldValue => !oldValue);\r\n  }\r\n\r\n  const handleRefresh = async (valueChangeId) => {\r\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\r\n    const response = await axios.get(tickerUrl);\r\n    const newPrice = formatPrice(response.data.quotes.USD.price);\r\n    const newCoinData = coinData.map((values) => {\r\n      let newValues = {...values};\r\n      if ( valueChangeId === values.key) {\r\n        newValues.price = newPrice;\r\n      }\r\n      return newValues;\r\n    });  \r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  return (\r\n    <AppStyle>\r\n      <AccountBalance \r\n        amount={balance} \r\n        showBalance={showBalance}\r\n        handleBrrrr={handleBrrrr}\r\n        toggleBalanceVisibility={toggleBalanceVisibility}/>\r\n      <CoinList \r\n        coinData={coinData} \r\n        handleRefresh={handleRefresh} \r\n        handleTransaction={handleTransaction}\r\n        showBalance={showBalance} />\r\n    </AppStyle>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/orbit/Documents/code/React/coin-exchange/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport AppHeader from './components/AppHeader';\nimport CoinList from './components/CoinList';\nimport AccountBalance from './components/AccountBalance';\nimport styled from 'styled-components';\nimport axios from 'axios'; //import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport 'bootswatch/dist/superhero/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all';\nconst AppStyle = styled.div`\n  text-align: center;\n  background-color: darkslategray;\n  color: #cccccc;\n`;\nconst COIN_COUNT = 10;\n\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\n\nfunction App(props) {\n  // const [balance, setBalance] = useState(10000);\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n  const apName = 'Coin Exchange';\n\n  const getIDs = async () => {\n    // Fetch the IDs of first COIN_COUNT items.\n    const repsonse = await axios.get('https://api.coinpaprika.com/v1/coins');\n    return repsonse.data.slice(0, COIN_COUNT).map(coin => coin.id);\n  };\n\n  const getCoinData = async coinIds => {\n    // Retrieve coin data array for given coin id's.\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(key => axios.get(tickerUrl + key));\n    return await Promise.all(promises);\n  };\n\n  const extractPrices = coinData => {\n    // Extract prices from given coinData array\n    return coinData.map(function (response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price)\n      };\n    });\n  };\n\n  const loadAllAPIData = async () => {\n    // Load API data for all items.\n    const coinIds = await getIDs();\n    const coinData = await getCoinData(coinIds);\n    const coinPriceData = extractPrices(coinData);\n    setCoinData(coinPriceData);\n  };\n\n  useEffect(function () {\n    if (coinData.length === 0) {\n      // component did mount\n      loadAllAPIData();\n    } else {// component did update\n    }\n  });\n\n  const handleBrrrr = () => {\n    setBalance(oldBalance => oldBalance + 1200);\n  };\n\n  const handleTransaction = (isBuy, valueChangeID) => {\n    var balanceChange = window.prompt('How much?') * (isBuy ? 1 : -1);\n    const newCoinData = coinData.map(function (values) {\n      let newValues = { ...values\n      };\n\n      if (valueChangeID === values.key) {\n        if (isBuy) {\n          if (balance < newValues.price) {\n            alert('Insufficient funds for this purchase.');\n            return values;\n          }\n        } else {\n          if (values.balance + balanceChange < 0) {\n            alert('Insufficient holdings for this sell order.');\n            return values;\n          }\n        } // Transaction is possible.\n\n\n        newValues.balance += balanceChange;\n        setBalance(oldBalance => oldBalance - balanceChange * newValues.price);\n      }\n\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  };\n\n  const toggleBalanceVisibility = () => {\n    setShowBalance(oldValue => !oldValue);\n  };\n\n  const handleRefresh = async valueChangeId => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map(values => {\n      let newValues = { ...values\n      };\n\n      if (valueChangeId === values.key) {\n        newValues.price = newPrice;\n      }\n\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  };\n\n  return /*#__PURE__*/React.createElement(AppStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AppHeader, {\n    apName: apName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountBalance, {\n    amount: balance,\n    showBalance: showBalance,\n    handleBrrrr: handleBrrrr,\n    toggleBalanceVisibility: toggleBalanceVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CoinList, {\n    coinData: coinData,\n    handleRefresh: handleRefresh,\n    handleTransaction: handleTransaction,\n    showBalance: showBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/Users/orbit/Documents/code/React/coin-exchange/src/App.js"],"names":["React","useState","useEffect","AppHeader","CoinList","AccountBalance","styled","axios","AppStyle","div","COIN_COUNT","formatPrice","price","parseFloat","Number","toFixed","App","props","balance","setBalance","showBalance","setShowBalance","coinData","setCoinData","apName","getIDs","repsonse","get","data","slice","map","coin","id","getCoinData","coinIds","tickerUrl","promises","key","Promise","all","extractPrices","response","name","ticker","symbol","quotes","USD","loadAllAPIData","coinPriceData","length","handleBrrrr","oldBalance","handleTransaction","isBuy","valueChangeID","balanceChange","window","prompt","newCoinData","values","newValues","alert","toggleBalanceVisibility","oldValue","handleRefresh","valueChangeId","newPrice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,6CAAP;AACA,OAAO,sCAAP;AAEA,MAAMC,QAAQ,GAAGF,MAAM,CAACG,GAAI;;;;CAA5B;AAKA,MAAMC,UAAU,GAAG,EAAnB;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAIC,UAAU,CAACC,MAAM,CAACF,KAAD,CAAN,CAAcG,OAAd,CAAsB,CAAtB,CAAD,CAAvC;;AAEA,SAASC,GAAT,CAAcC,KAAd,EAAqB;AAEnB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMuB,MAAM,GAAG,eAAf;;AAEA,QAAMC,MAAM,GAAG,YAAY;AACzB;AACA,UAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAU,sCAAV,CAAvB;AACA,WAAOD,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoB,CAApB,EAAsBnB,UAAtB,EAAkCoB,GAAlC,CAAsCC,IAAI,IAAIA,IAAI,CAACC,EAAnD,CAAP;AACD,GAJD;;AAMA,QAAMC,WAAW,GAAG,MAAMC,OAAN,IAAkB;AACpC;AACA,UAAMC,SAAS,GAAG,yCAAlB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACJ,GAAR,CAAYO,GAAG,IAAI9B,KAAK,CAACoB,GAAN,CAAUQ,SAAS,GAAGE,GAAtB,CAAnB,CAAjB;AACA,WAAO,MAAMC,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAb;AACD,GALD;;AAOA,QAAMI,aAAa,GAAIlB,QAAD,IAAc;AAClC;AACA,WAAOA,QAAQ,CAACQ,GAAT,CAAa,UAASW,QAAT,EAAmB;AACrC,YAAMV,IAAI,GAAGU,QAAQ,CAACb,IAAtB;AACA,aAAO;AACLS,QAAAA,GAAG,EAAKN,IAAI,CAACC,EADR;AAELU,QAAAA,IAAI,EAAIX,IAAI,CAACW,IAFR;AAGLC,QAAAA,MAAM,EAAEZ,IAAI,CAACa,MAHR;AAIL1B,QAAAA,OAAO,EAAE,CAJJ;AAKLN,QAAAA,KAAK,EAAGD,WAAW,CAACoB,IAAI,CAACc,MAAL,CAAYC,GAAZ,CAAgBlC,KAAjB;AALd,OAAP;AAOD,KATM,CAAP;AAUD,GAZD;;AAcA,QAAMmC,cAAc,GAAG,YAAY;AACjC;AACA,UAAMb,OAAO,GAAG,MAAMT,MAAM,EAA5B;AACA,UAAMH,QAAQ,GAAG,MAAMW,WAAW,CAACC,OAAD,CAAlC;AACA,UAAMc,aAAa,GAAGR,aAAa,CAAClB,QAAD,CAAnC;AACAC,IAAAA,WAAW,CAACyB,aAAD,CAAX;AACD,GAND;;AAQA9C,EAAAA,SAAS,CAAE,YAAW;AACpB,QAAIoB,QAAQ,CAAC2B,MAAT,KAAoB,CAAxB,EAA0B;AACxB;AACAF,MAAAA,cAAc;AACf,KAHD,MAGO,CACL;AACD;AACF,GAPQ,CAAT;;AASA,QAAMG,WAAW,GAAG,MAAM;AACxB/B,IAAAA,UAAU,CAAEgC,UAAU,IAAIA,UAAU,GAAG,IAA7B,CAAV;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAG,CAAEC,KAAF,EAASC,aAAT,KAA2B;AACnD,QAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,WAAd,KAA8BJ,KAAK,GAAG,CAAH,GAAM,CAAC,CAA1C,CAApB;AACA,UAAMK,WAAW,GAAGpC,QAAQ,CAACQ,GAAT,CAAc,UAAS6B,MAAT,EAAiB;AACjD,UAAIC,SAAS,GAAG,EAAC,GAAGD;AAAJ,OAAhB;;AACA,UAAKL,aAAa,KAAKK,MAAM,CAACtB,GAA9B,EAAmC;AACjC,YAAKgB,KAAL,EAAa;AACX,cAAKnC,OAAO,GAAG0C,SAAS,CAAChD,KAAzB,EAAiC;AAC/BiD,YAAAA,KAAK,CAAC,uCAAD,CAAL;AACA,mBAAOF,MAAP;AACD;AACF,SALD,MAKO;AACL,cAAIA,MAAM,CAACzC,OAAP,GAAiBqC,aAAjB,GAAiC,CAArC,EAAwC;AACtCM,YAAAA,KAAK,CAAC,4CAAD,CAAL;AACA,mBAAOF,MAAP;AACD;AACF,SAXgC,CAW/B;;;AACFC,QAAAA,SAAS,CAAC1C,OAAV,IAAqBqC,aAArB;AACApC,QAAAA,UAAU,CAAEgC,UAAU,IAAIA,UAAU,GAAGI,aAAa,GAACK,SAAS,CAAChD,KAArD,CAAV;AACD;;AACD,aAAOgD,SAAP;AACD,KAlBmB,CAApB;AAmBArC,IAAAA,WAAW,CAACmC,WAAD,CAAX;AACD,GAtBD;;AAwBA,QAAMI,uBAAuB,GAAG,MAAM;AACpCzC,IAAAA,cAAc,CAAC0C,QAAQ,IAAI,CAACA,QAAd,CAAd;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAOC,aAAP,IAAyB;AAC7C,UAAM9B,SAAS,GAAI,0CAAyC8B,aAAc,EAA1E;AACA,UAAMxB,QAAQ,GAAG,MAAMlC,KAAK,CAACoB,GAAN,CAAUQ,SAAV,CAAvB;AACA,UAAM+B,QAAQ,GAAGvD,WAAW,CAAC8B,QAAQ,CAACb,IAAT,CAAciB,MAAd,CAAqBC,GAArB,CAAyBlC,KAA1B,CAA5B;AACA,UAAM8C,WAAW,GAAGpC,QAAQ,CAACQ,GAAT,CAAc6B,MAAD,IAAY;AAC3C,UAAIC,SAAS,GAAG,EAAC,GAAGD;AAAJ,OAAhB;;AACA,UAAKM,aAAa,KAAKN,MAAM,CAACtB,GAA9B,EAAmC;AACjCuB,QAAAA,SAAS,CAAChD,KAAV,GAAkBsD,QAAlB;AACD;;AACD,aAAON,SAAP;AACD,KANmB,CAApB;AAOArC,IAAAA,WAAW,CAACmC,WAAD,CAAX;AACD,GAZD;;AAcA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,MAAM,EAAElC,MADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAEN,OADV;AAEE,IAAA,WAAW,EAAEE,WAFf;AAGE,IAAA,WAAW,EAAE8B,WAHf;AAIE,IAAA,uBAAuB,EAAEY,uBAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAQE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAExC,QADZ;AAEE,IAAA,aAAa,EAAE0C,aAFjB;AAGE,IAAA,iBAAiB,EAAEZ,iBAHrB;AAIE,IAAA,WAAW,EAAEhC,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAgBD;;AAED,eAAeJ,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport AppHeader from './components/AppHeader';\r\nimport CoinList from './components/CoinList';\r\nimport AccountBalance from './components/AccountBalance';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\n//import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootswatch/dist/superhero/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/js/all';\r\n\r\nconst AppStyle = styled.div`\r\n  text-align: center;\r\n  background-color: darkslategray;\r\n  color: #cccccc;\r\n`\r\nconst COIN_COUNT = 10;\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\r\n\r\nfunction App (props) {\r\n\r\n  // const [balance, setBalance] = useState(10000);\r\n  const [balance, setBalance] = useState(10000);\r\n  const [showBalance, setShowBalance] = useState(true);\r\n  const [coinData, setCoinData] = useState([]);\r\n  const apName = 'Coin Exchange';\r\n\r\n  const getIDs = async () => {\r\n    // Fetch the IDs of first COIN_COUNT items.\r\n    const repsonse = await axios.get('https://api.coinpaprika.com/v1/coins')\r\n    return repsonse.data.slice(0,COIN_COUNT).map(coin => coin.id);\r\n  }\r\n\r\n  const getCoinData = async(coinIds) => {\r\n    // Retrieve coin data array for given coin id's.\r\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\r\n    const promises = coinIds.map(key => axios.get(tickerUrl + key));\r\n    return await Promise.all(promises);\r\n  }\r\n\r\n  const extractPrices = (coinData) => {\r\n    // Extract prices from given coinData array\r\n    return coinData.map(function(response) {\r\n      const coin = response.data;\r\n      return {\r\n        key:    coin.id,\r\n        name:   coin.name,\r\n        ticker: coin.symbol, \r\n        balance: 0,\r\n        price:  formatPrice(coin.quotes.USD.price),\r\n      };\r\n    });\r\n  }\r\n\r\n  const loadAllAPIData = async () => {\r\n    // Load API data for all items.\r\n    const coinIds = await getIDs();\r\n    const coinData = await getCoinData(coinIds);\r\n    const coinPriceData = extractPrices(coinData);\r\n    setCoinData(coinPriceData);\r\n  }\r\n\r\n  useEffect (function() {\r\n    if (coinData.length === 0){\r\n      // component did mount\r\n      loadAllAPIData();\r\n    } else {\r\n      // component did update\r\n    }\r\n  });\r\n\r\n  const handleBrrrr = () => {\r\n    setBalance( oldBalance => oldBalance + 1200);\r\n  }\r\n\r\n  const handleTransaction = ( isBuy, valueChangeID) => {\r\n    var balanceChange = window.prompt('How much?') * (isBuy ? 1: -1);\r\n    const newCoinData = coinData.map( function(values) {\r\n      let newValues = {...values};\r\n      if ( valueChangeID === values.key) {\r\n        if ( isBuy ) {\r\n          if ( balance < newValues.price ) {\r\n            alert('Insufficient funds for this purchase.');\r\n            return values;\r\n          } \r\n        } else {\r\n          if (values.balance + balanceChange < 0) {\r\n            alert('Insufficient holdings for this sell order.');\r\n            return values;\r\n          }\r\n        } // Transaction is possible.\r\n        newValues.balance += balanceChange;\r\n        setBalance( oldBalance => oldBalance - balanceChange*newValues.price);\r\n      }\r\n      return newValues;\r\n    });\r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  const toggleBalanceVisibility = () => {\r\n    setShowBalance(oldValue => !oldValue);\r\n  }\r\n\r\n  const handleRefresh = async (valueChangeId) => {\r\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\r\n    const response = await axios.get(tickerUrl);\r\n    const newPrice = formatPrice(response.data.quotes.USD.price);\r\n    const newCoinData = coinData.map((values) => {\r\n      let newValues = {...values};\r\n      if ( valueChangeId === values.key) {\r\n        newValues.price = newPrice;\r\n      }\r\n      return newValues;\r\n    });  \r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  return (\r\n    <AppStyle>\r\n      <AppHeader \r\n        apName={apName}/>\r\n      <AccountBalance \r\n        amount={balance} \r\n        showBalance={showBalance}\r\n        handleBrrrr={handleBrrrr}\r\n        toggleBalanceVisibility={toggleBalanceVisibility}/>\r\n      <CoinList \r\n        coinData={coinData} \r\n        handleRefresh={handleRefresh} \r\n        handleTransaction={handleTransaction}\r\n        showBalance={showBalance} />\r\n    </AppStyle>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}
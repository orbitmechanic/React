{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/orbit/Documents/code/React/coin-exchange/src/App.js\";\nimport React from 'react';\nimport AppHeader from './components/AppHeader';\nimport CoinList from './components/CoinList';\nimport AccountBalance from './components/AccountBalance';\nimport styled from 'styled-components';\nimport axios from 'axios';\nconst AppStyle = styled.div`\n  text-align: center;\n  background-color: darkslategray;\n  color: #cccccc;\n`;\nconst COIN_COUNT = 10;\n\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apName: 'Coin Exchange',\n      balance: 10000,\n      showBalance: true,\n      coinData: []\n    };\n\n    this.getIDs = async () => {\n      // Fetch the IDs of first COIN_COUNT items.\n      const repsonse = await axios.get('https://api.coinpaprika.com/v1/coins');\n      return repsonse.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    };\n\n    this.getCoinData = async coinIds => {\n      // Retrieve coin data array for given coin id's.\n      const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n      const promises = coinIds.map(key => axios.get(tickerUrl + key));\n      return await Promise.all(promises);\n    };\n\n    this.extractPrices = coinData => {\n      // Extract prices from given coinData array\n      return coinData.map(function (response) {\n        const coin = response.data;\n        return {\n          key: coin.id,\n          name: coin.name,\n          ticker: coin.symbol,\n          balance: 0,\n          price: formatPrice(coin.quotes.USD.price)\n        };\n      });\n    };\n\n    this.loadAllAPIData = async () => {\n      // Load API data for all items.\n      const coinIds = await this.getIDs();\n      const coinData = await this.getCoinData(coinIds);\n      const coinPriceData = this.extractPrices(coinData);\n      this.setState({\n        coinData: coinPriceData\n      });\n    };\n\n    this.componentDidMount = async () => {\n      // hook for timing.  Do this:\n      this.loadAllAPIData();\n    };\n\n    this.toggleBalanceVisibility = () => {\n      this.setState({\n        showBalance: !this.state.showBalance\n      });\n    };\n\n    this.handleRefresh = async valueChangeId => {\n      const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n      const response = await axios.get(tickerUrl);\n      const newPrice = formatPrice(response.data.quotes.USD.price);\n      const newCoinData = this.state.coinData.map(values => {\n        let newValues = { ...values\n        };\n\n        if (valueChangeId === values.key) {\n          newValues.price = newPrice;\n        }\n\n        return newValues;\n      });\n      this.setState({\n        coinData: newCoinData\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AppStyle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AppHeader, {\n      apName: this.state.apName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AccountBalance, {\n      amount: this.state.balance,\n      showBalance: this.state.showBalance,\n      toggleBalanceVisibility: this.toggleBalanceVisibility,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CoinList, {\n      coinData: this.state.coinData,\n      handleRefresh: this.handleRefresh,\n      showBalance: this.state.showBalance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/Users/orbit/Documents/code/React/coin-exchange/src/App.js"],"names":["React","AppHeader","CoinList","AccountBalance","styled","axios","AppStyle","div","COIN_COUNT","formatPrice","price","parseFloat","Number","toFixed","App","Component","state","apName","balance","showBalance","coinData","getIDs","repsonse","get","data","slice","map","coin","id","getCoinData","coinIds","tickerUrl","promises","key","Promise","all","extractPrices","response","name","ticker","symbol","quotes","USD","loadAllAPIData","coinPriceData","setState","componentDidMount","toggleBalanceVisibility","handleRefresh","valueChangeId","newPrice","newCoinData","values","newValues","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport AppHeader from './components/AppHeader';\r\nimport CoinList from './components/CoinList';\r\nimport AccountBalance from './components/AccountBalance';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst AppStyle = styled.div`\r\n  text-align: center;\r\n  background-color: darkslategray;\r\n  color: #cccccc;\r\n`\r\nconst COIN_COUNT = 10;\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n      apName: 'Coin Exchange',\r\n      balance: 10000,\r\n      showBalance: true,\r\n      coinData: [],\r\n  };\r\n\r\n  getIDs = async () => {\r\n    // Fetch the IDs of first COIN_COUNT items.\r\n    const repsonse = await axios.get('https://api.coinpaprika.com/v1/coins')\r\n    return repsonse.data.slice(0,COIN_COUNT).map(coin => coin.id);\r\n  }\r\n\r\n  getCoinData = async(coinIds) => {\r\n    // Retrieve coin data array for given coin id's.\r\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\r\n    const promises = coinIds.map(key => axios.get(tickerUrl + key));\r\n    return await Promise.all(promises);\r\n  }\r\n\r\n  extractPrices = (coinData) => {\r\n    // Extract prices from given coinData array\r\n    return coinData.map(function(response) {\r\n      const coin = response.data;\r\n      return {\r\n        key:    coin.id,\r\n        name:   coin.name,\r\n        ticker: coin.symbol, \r\n        balance: 0,\r\n        price:  formatPrice(coin.quotes.USD.price),\r\n      };\r\n    });\r\n  }\r\n\r\n  loadAllAPIData = async () => {\r\n    // Load API data for all items.\r\n    const coinIds = await this.getIDs();\r\n    const coinData = await this.getCoinData(coinIds);\r\n    const coinPriceData = this.extractPrices(coinData);\r\n    this.setState({ coinData: coinPriceData});\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    // hook for timing.  Do this:\r\n    this.loadAllAPIData();\r\n  };   \r\n\r\n  toggleBalanceVisibility = () => {\r\n    this.setState({showBalance:!this.state.showBalance});\r\n  }\r\n\r\n  handleRefresh = async (valueChangeId) => {\r\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\r\n    const response = await axios.get(tickerUrl);\r\n    const newPrice = formatPrice(response.data.quotes.USD.price);\r\n    const newCoinData = this.state.coinData.map((values) => {\r\n      let newValues = {...values};\r\n      if ( valueChangeId === values.key) {\r\n        newValues.price = newPrice;\r\n      }\r\n      return newValues;\r\n    });  \r\n    this.setState({coinData: newCoinData});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppStyle>\r\n        <AppHeader \r\n          apName={this.state.apName}/>\r\n        <AccountBalance \r\n          amount={this.state.balance} \r\n          showBalance={this.state.showBalance}\r\n          toggleBalanceVisibility={this.toggleBalanceVisibility}/>\r\n        <CoinList \r\n          coinData={this.state.coinData} \r\n          handleRefresh={this.handleRefresh} \r\n          showBalance={this.state.showBalance} />\r\n      </AppStyle>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}